generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(STUDENT)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Student relations
  examAttempts ExamAttempt[]
  answers      Answer[]

  // Admin relations
  createdExams Exam[] @relation("ExamCreator")

  @@map("users")
}

model Exam {
  id          String    @id @default(cuid())
  title       String
  description String?
  duration    Int      // in minutes
  totalMarks  Int
  isActive    Boolean   @default(true)
  startTime   DateTime?
  endTime     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  createdBy String
  creator   User   @relation("ExamCreator", fields: [createdBy], references: [id])

  questions    Question[]
  examAttempts ExamAttempt[]

  @@map("exams")
}

model Question {
  id       String       @id @default(cuid())
  question String
  type     QuestionType
  marks    Int
  examId   String
  exam     Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)

  options Option[]
  answers Answer[]

  @@map("questions")
}

model Option {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("options")
}

model ExamAttempt {
  id          String    @id @default(cuid())
  studentId   String
  examId      String
  startedAt   DateTime  @default(now())
  submittedAt DateTime?
  score       Int?
  totalMarks  Int
  isCompleted Boolean   @default(false)

  student User  @relation(fields: [studentId], references: [id])
  exam    Exam  @relation(fields: [examId], references: [id])
  answers Answer[]

  @@unique([studentId, examId])
  @@map("exam_attempts")
}

model Answer {
  id            String  @id @default(cuid())
  studentId     String
  questionId    String
  examAttemptId String
  selectedOption String?
  textAnswer    String?

  student     User        @relation(fields: [studentId], references: [id])
  question    Question    @relation(fields: [questionId], references: [id])
  examAttempt ExamAttempt @relation(fields: [examAttemptId], references: [id])

  @@unique([studentId, questionId, examAttemptId])
  @@map("answers")
}

enum Role {
  ADMIN
  STUDENT
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}
