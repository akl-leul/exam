// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Or "postgresql", "mysql", etc.
  url      = env("DATABASE_URL")
}

model Teacher {
  id            String          @id @default(cuid())
  username      String          @unique
  passwordHash  String
  exams         Exam[]
  announcements Announcement[]  // ADDED: Back-relation to Announcement
  scheduledExams ScheduledExam[] // ADDED: Back-relation to ScheduledExam
}

model Exam {
  id           String       @id @default(cuid())
  title        String
  instructions String?
  header       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  teacher      Teacher      @relation(fields: [teacherId], references: [id])
  teacherId    String
  questions    Question[]
  submissions  Submission[]
}

enum QuestionType {
  MCQ
  TRUE_FALSE
  SHORT_ANSWER
}

model Question {
  id         String       @id @default(cuid())
  text       String
  type       QuestionType
  order      Int
  exam       Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId     String
  options    Option[]
  answers    Answer[]
}

model Option {
  id                   String   @id @default(cuid())
  text                 String
  isCorrect            Boolean  @default(false)
  question             Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId           String
  answersSelectingThis Answer[] @relation("SelectedOptionAnswers")
}

model StudentInfo {
  id          String       @id @default(cuid())
  name        String
  section     String
  grade       String
  createdAt   DateTime     @default(now())
  submissions Submission[]
}

model Submission {
  id            String      @id @default(cuid())
  status        String      @default("STARTED")
  exam          Exam        @relation(fields: [examId], references: [id])
  examId        String
  studentInfo   StudentInfo @relation(fields: [studentInfoId], references: [id])
  studentInfoId String
  submittedAt   DateTime?
  answers       Answer[]
  score         Float?
  isFullyGraded Boolean     @default(false)
  // department    String? // Kept commented out as per previous fix, uncomment if you add it to forms
}

model Answer {
  id               String     @id @default(cuid())
  submission       Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId     String
  question         Question   @relation(fields: [questionId], references: [id])
  questionId       String
  selectedOption   Option?    @relation(fields: [selectedOptionId], references: [id], name: "SelectedOptionAnswers")
  selectedOptionId String?
  textAnswer       String?
  isCorrect        Boolean?
  pointsAwarded    Float?

  @@unique([submissionId, questionId])
}
 
model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String
  expiresAt  DateTime?
  isPublished Boolean @default(true)
  createdAt  DateTime @default(now())
  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  teacherId  String
}

model ScheduledExam {
  id         String   @id @default(cuid())
  examTitle  String
  description String?
  examDate   DateTime
  duration   Int?
  course     String?
  location   String?
  notes      String?
  isPublished Boolean @default(true)
  createdAt  DateTime @default(now())
  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  teacherId  String
}
